// Code generated by swagger_to. DO NOT EDIT.
package foo

// Automatically generated file by swagger_to. DO NOT EDIT OR APPEND ANYTHING!

import (
	"errors"
	"fmt"
	"github.com/xeipuuv/gojsonschema"
)

func mustNewJSONSchema(text string, name string) *gojsonschema.Schema {
	loader := gojsonschema.NewStringLoader(text)
	schema, err := gojsonschema.NewSchema(loader)
	if err != nil {
		panic(fmt.Sprintf("failed to load JSON Schema %#v: %s", text, err.Error()))
	}
	return schema
}

var jsonSchemaMyTypeText = `{
  "title": "MyType",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "properties": {
    "my_integer": {
      "type": "integer",
      "format": "int32"
    }
  },
  "type": "object"
}`

var jsonSchemaSubTypeText = `{
  "title": "SubType",
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "MyType": {
      "properties": {
        "my_integer": {
          "type": "integer",
          "format": "int32"
        }
      },
      "type": "object"
    }
  },
  "allOf": [
    {
      "$ref": "#/definitions/MyType"
    },
    {
      "type": "object",
      "properties": {
        "sub_property": {
          "type": "integer",
          "format": "int32"
        }
      }
    }
  ],
  "type": "object"
}`

var jsonSchemaMyType = mustNewJSONSchema(
	jsonSchemaMyTypeText,
	"MyType")

var jsonSchemaSubType = mustNewJSONSchema(
	jsonSchemaSubTypeText,
	"SubType")

// ValidateAgainstMyTypeSchema validates a message coming from the client against MyType schema.
func ValidateAgainstMyTypeSchema(bb []byte) error {
	loader := gojsonschema.NewStringLoader(string(bb))
	result, err := jsonSchemaMyType.Validate(loader)
	if err != nil {
		return err
	}

	if result.Valid() {
		return nil
	}

	msg := ""
	for i, valErr := range result.Errors() {
		if i > 0 {
			msg += ", "
		}
		msg += valErr.String()
	}
	return errors.New(msg)
}

// ValidateAgainstSubTypeSchema validates a message coming from the client against SubType schema.
func ValidateAgainstSubTypeSchema(bb []byte) error {
	loader := gojsonschema.NewStringLoader(string(bb))
	result, err := jsonSchemaSubType.Validate(loader)
	if err != nil {
		return err
	}

	if result.Valid() {
		return nil
	}

	msg := ""
	for i, valErr := range result.Errors() {
		if i > 0 {
			msg += ", "
		}
		msg += valErr.String()
	}
	return errors.New(msg)
}

// Automatically generated file by swagger_to. DO NOT EDIT OR APPEND ANYTHING!
